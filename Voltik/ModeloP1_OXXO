{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1jfC321iVZUAZJ3ryV-iVsaQMkfjERbd8","timestamp":1748192132455}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9KKBGkcLUGbm","executionInfo":{"status":"ok","timestamp":1748125199201,"user_tz":360,"elapsed":12771,"user":{"displayName":"Guillermo Alexis Castro Vaquero","userId":"01824178220566757521"}},"outputId":"4eae309c-ac4a-4b30-e26c-6be4c1d86f64"},"outputs":[{"output_type":"stream","name":"stdout","text":["E: Failed to fetch https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu/pool/main/g/gdal/python3-gdal_3.6.4%2bdfsg-1%7ejammy0_amd64.deb  404  Not Found [IP: 185.125.190.80 443]\n","E: Failed to fetch https://ppa.launchpadcontent.net/ubuntugis/ppa/ubuntu/pool/main/g/gdal/gdal-bin_3.6.4%2bdfsg-1%7ejammy0_amd64.deb  404  Not Found [IP: 185.125.190.80 443]\n","E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.8/1.8 MB\u001b[0m \u001b[31m19.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h"]}],"source":["# ▸ Celda 1\n","# --- Instalar dependencias de sistema ---\n","!apt-get -qq install --no-install-recommends \\\n","      gdal-bin python3-gdal python3-rtree\n","# --- Instalar librerías de Python ---\n","!pip install -q --upgrade pip\n","!pip install -q pandas scikit-learn imbalanced-learn geopandas shapely\n"]},{"cell_type":"code","source":["# ▸ Celda 2\n","from google.colab import files\n","uploaded = files.upload()          # aparecerá un cuadro para que elijas los CSV/XLSX\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":177},"id":"kqlQbG-OVl4T","executionInfo":{"status":"ok","timestamp":1748124738273,"user_tz":360,"elapsed":26255,"user":{"displayName":"Luis Patricio","userId":"03301646199461048751"}},"outputId":"19e81dfa-4354-4465-f841-8f4abb938eaa"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-eace559d-a5b2-43ca-9876-03a3d91df741\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-eace559d-a5b2-43ca-9876-03a3d91df741\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving Venta.csv to Venta.csv\n","Saving Meta_venta.csv to Meta_venta.csv\n","Saving DIM_TIENDA.csv to DIM_TIENDA.csv\n","Saving DIM_TIENDA_TEST.csv to DIM_TIENDA_TEST.csv\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.pipeline import Pipeline\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.ensemble import GradientBoostingClassifier, RandomForestClassifier\n","from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix\n","from imblearn.over_sampling import SMOTE\n","\n","# 1. Cargar datos\n","tienda   = pd.read_csv('DIM_TIENDA.csv')\n","venta    = pd.read_csv('Venta.csv')\n","meta     = pd.read_csv('Meta_venta.csv')        # contiene la meta mensual por ENTORNO_DES\n","tienda_test = pd.read_csv('DIM_TIENDA_TEST.csv')\n","\n","# 2. Agregar ventas promedio por tienda (puedes usar suma o mediana también)\n","venta_agg = (\n","    venta.groupby('TIENDA_ID')['VENTA_TOTAL']\n","          .mean()                                  # promedio mensual histórico\n","          .rename('VENTA_PROM')\n","          .reset_index()\n",")\n","df = tienda.merge(venta_agg, on='TIENDA_ID', how='left')\n","df = df.merge(meta, on='ENTORNO_DES', how='left')\n","\n","# 3. Etiqueta binaria: 1 = cumple meta\n","df['SUCCESS'] = (df['VENTA_PROM'] >= df['Meta_venta']).astype(int)\n","\n","# 4. Seleccionar solo latitude/longitude y etiqueta\n","df_model = df[['LATITUD_NUM', 'LONGITUD_NUM', 'SUCCESS']].dropna()\n","\n","X = df_model[['LATITUD_NUM', 'LONGITUD_NUM']]\n","y = df_model['SUCCESS']\n","\n","# 5. Split estratificado y SMOTE para balancear\n","X_train, X_val, y_train, y_val = train_test_split(\n","    X, y, test_size=0.2, stratify=y, random_state=42\n",")\n","smote = SMOTE(random_state=42)\n","X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)\n","\n","# 6. Pipelines de modelos a comparar\n","pipelines = {\n","    \"LogReg\": Pipeline([\n","        (\"scaler\", StandardScaler()),\n","        (\"clf\",    LogisticRegression(max_iter=200, class_weight='balanced'))\n","    ]),\n","    \"GradientBoost\": GradientBoostingClassifier(),\n","    \"RandomForest\":  RandomForestClassifier(class_weight='balanced_subsample')\n","}\n","\n","# 7. Entrenar y evaluar\n","for name, model in pipelines.items():\n","    model.fit(X_train_bal, y_train_bal)\n","    y_pred = model.predict(X_val)\n","    y_proba = model.predict_proba(X_val)[:,1] if hasattr(model, \"predict_proba\") else None\n","\n","    print(f\"\\n{name}\\n\", \"-\"*30)\n","    print(classification_report(y_val, y_pred, digits=3))\n","    if y_proba is not None:\n","        print(\"ROC-AUC:\", roc_auc_score(y_val, y_proba).round(3))\n","    print(\"Matriz de confusión:\\n\", confusion_matrix(y_val, y_pred))\n","\n","# 8. (opcional) Ajuste fino al mejor modelo, e.g. GradientBoost\n","param_grid = {\n","    \"n_estimators\":[200,300],\n","    \"learning_rate\":[0.05,0.1],\n","    \"max_depth\":[2,3]\n","}\n","gb_clf = GridSearchCV(\n","    GradientBoostingClassifier(),\n","    param_grid, scoring='roc_auc',\n","    cv=5, n_jobs=-1\n",").fit(X_train_bal, y_train_bal)\n","\n","best_model = gb_clf.best_estimator_\n","print(\"\\nMejor configuración:\", gb_clf.best_params_)\n","\n","# 9. Entrenar definitivo con TODO el set balanceado\n","best_model.fit(X_train_bal, y_train_bal)\n","\n","# 10. Predecir tiendas de prueba\n","test_pred = best_model.predict_proba(\n","    tienda_test[['LATITUD_NUM','LONGITUD_NUM']].dropna()\n",")[:,1]     # probabilidad de éxito\n","\n","# 11. Salida final\n","out = tienda_test.copy()\n","out['PROB_SUCCESS'] = test_pred\n","out['PRED_SUCCESS'] = (out['PROB_SUCCESS']>=0.5).astype(int)\n","\n","out[['TIENDA_ID','PROB_SUCCESS','PRED_SUCCESS']].to_csv(\n","    'Predicciones_DIM_TIENDA_TEST.csv', index=False\n",")\n","print(\"\\nArchivo generado: Predicciones_DIM_TIENDA_TEST.csv\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jI8UH2VuVm7h","executionInfo":{"status":"ok","timestamp":1748124999147,"user_tz":360,"elapsed":27376,"user":{"displayName":"Luis Patricio","userId":"03301646199461048751"}},"outputId":"72806b8e-2cc2-4055-9951-b2898dbd2d4c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","LogReg\n"," ------------------------------\n","              precision    recall  f1-score   support\n","\n","           0      0.048     0.600     0.088        10\n","           1      0.938     0.337     0.496       181\n","\n","    accuracy                          0.351       191\n","   macro avg      0.493     0.469     0.292       191\n","weighted avg      0.892     0.351     0.475       191\n","\n","ROC-AUC: 0.376\n","Matriz de confusión:\n"," [[  6   4]\n"," [120  61]]\n","\n","GradientBoost\n"," ------------------------------\n","              precision    recall  f1-score   support\n","\n","           0      0.047     0.300     0.081        10\n","           1      0.945     0.663     0.779       181\n","\n","    accuracy                          0.644       191\n","   macro avg      0.496     0.481     0.430       191\n","weighted avg      0.898     0.644     0.743       191\n","\n","ROC-AUC: 0.498\n","Matriz de confusión:\n"," [[  3   7]\n"," [ 61 120]]\n","\n","RandomForest\n"," ------------------------------\n","              precision    recall  f1-score   support\n","\n","           0      0.000     0.000     0.000        10\n","           1      0.932     0.751     0.832       181\n","\n","    accuracy                          0.712       191\n","   macro avg      0.466     0.376     0.416       191\n","weighted avg      0.883     0.712     0.788       191\n","\n","ROC-AUC: 0.53\n","Matriz de confusión:\n"," [[  0  10]\n"," [ 45 136]]\n","\n","Mejor configuración: {'learning_rate': 0.05, 'max_depth': 3, 'n_estimators': 300}\n","\n","Archivo generado: Predicciones_DIM_TIENDA_TEST.csv\n"]}]},{"cell_type":"code","source":["# ▸ Celda 4\n","from google.colab import files\n","files.download('Predicciones_DIM_TIENDA_TEST.csv')\n"],"metadata":{"id":"NkVplQkEbsfl","executionInfo":{"status":"ok","timestamp":1748126064242,"user_tz":360,"elapsed":41,"user":{"displayName":"Luis Patricio","userId":"03301646199461048751"}},"outputId":"7228d61e-6adb-433f-c9dc-0249078c10f7","colab":{"base_uri":"https://localhost:8080/","height":17}},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["\n","    async function download(id, filename, size) {\n","      if (!google.colab.kernel.accessAllowed) {\n","        return;\n","      }\n","      const div = document.createElement('div');\n","      const label = document.createElement('label');\n","      label.textContent = `Downloading \"${filename}\": `;\n","      div.appendChild(label);\n","      const progress = document.createElement('progress');\n","      progress.max = size;\n","      div.appendChild(progress);\n","      document.body.appendChild(div);\n","\n","      const buffers = [];\n","      let downloaded = 0;\n","\n","      const channel = await google.colab.kernel.comms.open(id);\n","      // Send a message to notify the kernel that we're ready.\n","      channel.send({})\n","\n","      for await (const message of channel.messages) {\n","        // Send a message to notify the kernel that we're ready.\n","        channel.send({})\n","        if (message.buffers) {\n","          for (const buffer of message.buffers) {\n","            buffers.push(buffer);\n","            downloaded += buffer.byteLength;\n","            progress.value = downloaded;\n","          }\n","        }\n","      }\n","      const blob = new Blob(buffers, {type: 'application/binary'});\n","      const a = document.createElement('a');\n","      a.href = window.URL.createObjectURL(blob);\n","      a.download = filename;\n","      div.appendChild(a);\n","      a.click();\n","      div.remove();\n","    }\n","  "]},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.Javascript object>"],"application/javascript":["download(\"download_64f95e31-761f-47a1-bf59-727deb9672c1\", \"Predicciones_DIM_TIENDA_TEST.csv\", 2664)"]},"metadata":{}}]}]}